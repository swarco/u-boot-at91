/*
 * sama5d35-swarco-air-mk2.dts - Device Tree for Swarco SCC-Air Mk.II
 *
 *  Copyright (C) 2013 Atmel,
 *                2013 Ludovic Desroches <ludovic.desroches@atmel.com>
 *                2016 Karl Olsen <karl@micro-technic.com>
 *                2019 Jakob FÃ¸rster <jf@swtech.dk>
 *
 * Licensed under GPLv2 or later.
 */

/dts-v1/;
#include "sama5d35.dtsi"

/ {
	model = "swarco-scc-air-mk2-sama5";
	compatible = "atmel,sama5d35-swarco-scc-air-mk2", "atmel,sama5d35", "atmel,sama5d3", "atmel,sama5";

	chosen {
		stdout-path = "serial0:115200n8";
		/* bootargs = "rootfstype=ubifs ubi.mtd=2 root=ubi0:rootfs"; */
	};

	memory {
		reg = <0x20000000 0x10000000>;
	};

	clocks {
		slow_xtal {
			clock-frequency = <32768>;
		};

		main_xtal {
			clock-frequency = <12000000>;
		};
	};

	gpioleds {
		compatible = "gpio-leds";

		/* D15 green SMD LED */
		led_sw {
			label = "sw_led";
			gpios = <&pioC 20 GPIO_ACTIVE_LOW>;
			default-state = "on";
			linux,default-trigger = "cpu0";
		};

		/* LED board */
		/* ST_LED_1 */
		board_led_1 {
			label = "board_led_1";
			gpios = <&pioE 5 GPIO_ACTIVE_LOW>;
			default-state = "off";
		};

		/* ST_LED_2 */
		board_led_2 {
			label = "board_led_2";
			gpios = <&pioE 3 GPIO_ACTIVE_LOW>;
			default-state = "off";
		};

		/* ST_LED_3 */
		board_led_3 {
			label = "board_led_3";
			gpios = <&pioE 15 GPIO_ACTIVE_LOW>;
			default-state = "off";
		};

		/* ST_LED_4 */
		board_led_4 {
			label = "board_led_4";
			gpios = <&pioE 6 GPIO_ACTIVE_LOW>;
			default-state = "off";
		};

		/* ST_LED_5 */
		board_led_5 {
			label = "board_led_5";
			gpios = <&pioE 13 GPIO_ACTIVE_LOW>;
			default-state = "off";
		};

		/* ST_LED_6 */
		board_led_6 {
			label = "board_led_6";
			gpios = <&pioE 1 GPIO_ACTIVE_LOW>;
			default-state = "off";
		};
	};

	ahb {
		apb {
			/* DBGU (/dev/ttyS0): Console port. RxD, TxD.
			 * Accessible through USB Device port with FTDI USB-serial converter. */
			dbgu: serial@ffffee00 {
				atmel,use-dma-rx;
				atmel,use-dma-tx;
				status = "okay";
			};

			/* USART0 (/dev/ttyS1): RS485#1. RxD, TxD, RTS. */
			usart0: serial@f001c000 {
				pinctrl-0 = <&pinctrl_usart0 &pinctrl_usart0_rts>;
				linux,rs485-enabled-at-boot-time;
				rs485-rts-delay = <1 1>;
				atmel,use-dma-rx;
				atmel,use-dma-tx;
				status = "okay";
			};

			/* USART1 (/dev/ttyS2): RS485#3. RxD, TxD, RTS. */
			usart1: serial@f0020000 {
				pinctrl-0 = <&pinctrl_usart1 &pinctrl_usart1_rts>;
				linux,rs485-enabled-at-boot-time;
				rs485-rts-delay = <1 1>;
				atmel,use-dma-rx;
				atmel,use-dma-tx;
				status = "okay";
			};

			/* USART2 (/dev/ttyS3): RS232#1 with full modem.
			 * CN9 DSUB-9 male on front. */
			usart2: serial@f8020000 {
				pinctrl-0 = <&pinctrl_usart2 &pinctrl_usart2_rts_cts>;
				dtr-gpios = <&pioE 27 GPIO_ACTIVE_LOW>;
				rng-gpios = <&pioE 28 GPIO_ACTIVE_LOW>;
				dsr-gpios = <&pioE 29 GPIO_ACTIVE_LOW>;
				dcd-gpios = <&pioE 30 GPIO_ACTIVE_LOW>;
				atmel,use-dma-rx;
				atmel,use-dma-tx;
				status = "okay";
			};

			/* USART3 (dev/ttyS4): RS485#2. RxD, TxD, RTS. */
			usart3: serial@f8024000 {
				pinctrl-0 = <&pinctrl_usart3 &pinctrl_usart3_rts>;
				linux,rs485-enabled-at-boot-time;
				rs485-rts-delay = <1 1>;
				atmel,use-dma-rx;
				atmel,use-dma-tx;
				status = "okay";
			};

			/* UART0 (dev/ttyS5):  RS232#2. RxD, TxD. */
			uart0: serial@f0024000 {
				status = "okay";
			};

			/* UART1 (dev/ttyS6):  UART Expansion board. RxD, TxD. */
			uart1: serial@f8028000 {
				status = "okay";
			};

            /* Twin wire communication - Expansion board*/
            i2c1: i2c@f0018000 {
				status = "okay";
			};

			/* SPI - Expansion board*/
			spi0: spi@f0004000 {
				/* The default pinctrl_spi0 covers SPCK, MISO, MOSI.
				 * Chip select is GPIO which does not need pinctrl. */
				cs-gpios = <&pioD 13 0>;
				status = "okay";
			};

			/* MicroSD connector */
			mmc0: mmc@f0000000 {
				pinctrl-0 = <&pinctrl_mmc0_clk_cmd_dat0 &pinctrl_mmc0_dat1_3 &pinctrl_mmc0_cd>;
				/* If you want to prevent DMA usage:
				 * dma-names = "rxtxdlesnotexist"; */
				status = "okay";

				slot@0 {
					reg = <0>;
					bus-width = <4>;
					cd-gpios = <&pioB 17 GPIO_ACTIVE_LOW>;
				};
			};

			/* 10/100 macb not in use */
			macb1: ethernet@f802c000 {
				status = "disable";
			};

			/* Gigabit gmac directly connected to a KSZ8795 or
			 * KSZ8765 5-port switch. We use a platform "fixed"
			 * MDIO bus (CONFIG_FIXED_PHY) at 1000M always up
			 * instead of a physical MDIO bus.
			 * The KSZ87x5 is managed through SPI interface. */
			macb0: ethernet@f0028000 {
				pinctrl-0 = <&pinctrl_macb0_data_rgmii &pinctrl_macb0_signal_rgmii_nomdio>;
				phy-mode = "rgmii";
				#address-cells = <1>;
				#size-cells = <0>;
				status = "okay";

				/* @@kro: Support for "fixed-link" has been patched into
				 * drivers/net/ethernet/cadence/macb.c.
				 * Without this macb.c only checks its own mii bus. */
				fixed-link {
					speed = <1000>;
					full-duplex;
				};
			};

			/* CAN I/O */
			can1: can@f8010000 {
				status = "okay";
			};

			/* SPI 1 - micrel switch */
			spi1: spi@f8008000 {
				/* The default pinctrl_spi1 covers SPCK, MISO, MOSI.
				 * Chip select is GPIO which does not need pinctrl. */
				cs-gpios = <&pioC 25 0>;
				status = "okay";

				ksz87x5_spi@0 {
					/* Micrel KSZ8795 5-port switch */
					compatible = "micrel,ksz8795";
					reg = <0>;
					reset-gpios = <&pioC 16 GPIO_ACTIVE_LOW>;
					spi-max-frequency = <50000000>;
					#address-cells = <1>;
					#size-cells = <0>;

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port0@0 {
							reg = <0>;
							label = "eth1";
						};

						port1@1 {
							reg = <1>;
							label = "eth2";
						};

						port4@4 {
							reg = <4>;
							label = "cpu";
							ethernet = <&macb0>;
						};
					};
				};
			};

			/* ADC enable */
			adc0: adc@f8018000 {
				atmel,adc-channels-used = <0xC7>;
				pinctrl-0 = <
					&pinctrl_adc0_adtrg
					&pinctrl_adc0_ad0
					&pinctrl_adc0_ad1
					&pinctrl_adc0_ad2
					&pinctrl_adc0_ad6
					&pinctrl_adc0_ad7>;
				atmel,adc-use-res = "highres";
				atmel,adc-vref = <3300>;
				status = "okay";
			};

			/* Watchdog */
			watchdog@fffffe40 {
				/delete-property/ atmel,dbg-halt;
				status = "okay";
			};

			/* RTC */
			/* Nothing necessary, is automatically enabled */

			/* Main clock crystal frequency */
			pmc: pmc@fffffc00 {
				main: mainck {
					clock-frequency = <12000000>;
				};
			};

			pinctrl@fffff200 {
				board {
					/* Card Detect GPIO input for MicroSD */
					pinctrl_mmc0_cd: mmc0_cd-0 {
						atmel,pins =
							<AT91_PIOB 17 AT91_PERIPH_GPIO AT91_PINCTRL_PULL_UP_DEGLITCH>;
					};

					/* VBUS detect GPIO input pin for USB Device */
					pinctrl_usba_vbus: usba_vbus-0 {
						atmel,pins =
							<AT91_PIOD 28 AT91_PERIPH_GPIO AT91_PINCTRL_DEGLITCH>;
					};

					/* RTS pin for USART0 (RS485#1) */
					pinctrl_usart0_rts: usart0_rts-0 {
						atmel,pins =
							<AT91_PIOD 16 AT91_PERIPH_A AT91_PINCTRL_NONE>;
					};

					/* RTS pin for USART1 (RS485#3) */
					pinctrl_usart1_rts: usart1_rts-0 {
						atmel,pins =
							<AT91_PIOB 27 AT91_PERIPH_A AT91_PINCTRL_NONE>;
					};

					/* RTS pin for USART3 (RS485#2) */
					pinctrl_usart3_rts: usart3_rts-0 {
						atmel,pins =
							<AT91_PIOE 17 AT91_PERIPH_B AT91_PINCTRL_NONE>;
					};

					/* Control signals for macb0 rgmii. Same as pinctrl_macb0_signal_rgmii
					 * but with PB16 (GMDC) and PB17 (GMDIO) removed. */
					pinctrl_macb0_signal_rgmii_nomdio: macb0_signal_rgmii_nomdio {
						atmel,pins =
							<AT91_PIOB 8 AT91_PERIPH_A AT91_PINCTRL_NONE    /* PB8 periph A GTXCK, conflicts with PWMH2 */
							 AT91_PIOB 9 AT91_PERIPH_A AT91_PINCTRL_NONE    /* PB9 periph A GTXEN, conflicts with PWML2 */
							 AT91_PIOB 11 AT91_PERIPH_A AT91_PINCTRL_NONE   /* PC16 periph A GRXCK */
							 AT91_PIOB 13 AT91_PERIPH_A AT91_PINCTRL_NONE   /* PB13 periph A GRXER, conflicts with PWML3 */
							 AT91_PIOB 18 AT91_PERIPH_A AT91_PINCTRL_NONE>; /* PB18 periph A G125CK */
					};

					/* GPIOs for digital inputs. */
					pinctrl_dig_in: dig_in-0 {
						atmel,pins =
							<AT91_PIOD 20 AT91_PERIPH_GPIO AT91_PINCTRL_DEGLITCH    /* PB19 = DIG_IN_0 */
							 AT91_PIOD 21 AT91_PERIPH_GPIO AT91_PINCTRL_DEGLITCH    /* PB20 = DIG_IN_1 */
							 AT91_PIOD 22 AT91_PERIPH_GPIO AT91_PINCTRL_DEGLITCH    /* PB21 = DIG_IN_2 */
							 AT91_PIOD 23 AT91_PERIPH_GPIO AT91_PINCTRL_DEGLITCH    /* PB22 = DIG_IN_3 */
							 AT91_PIOD 24 AT91_PERIPH_GPIO AT91_PINCTRL_DEGLITCH>;  /* PB23 = DIG_IN_4 */
					};

					/* GPIOs for digital inputs and output to the expansion board. */
					pinctrl_exp_board_io: pinctrl_exp_board_io-0 {
						atmel,pins =
							<AT91_PIOC 10 AT91_PERIPH_GPIO AT91_PINCTRL_DEGLITCH    /* PC10 =  IN_1 */
							 AT91_PIOC 16 AT91_PERIPH_GPIO AT91_PINCTRL_DEGLITCH>;  /* PC16 = OUT_1 */
					};
				};
			};
		};  /* apb END */

		/* USB Device */
		usb0: gadget@00500000 {
			atmel,vbus-gpio = <&pioD 28 GPIO_ACTIVE_HIGH>;
			pinctrl-names = "default";
			pinctrl-0 = <&pinctrl_usba_vbus>;
			status = "okay";
		};

		/* USB Host fullspeed */
		usb1: ohci@00600000 {
			num-ports = <3>;
			atmel,vbus-gpio =
				<0				/* USB_A is device only */
				 0				/* USB_B: Modem module, VBUS controlled manually by PD24 */
				 &pioD 29 GPIO_ACTIVE_LOW>;	/* USB_C: Host connector powered through LM3526-L */
			status = "okay";
		};

		/* USB Host highspeed */
		usb2: ehci@00700000 {
			status = "okay";
		};

		/* ECC settings must match with the bootloader. */
		nand0: nand@60000000 {
			//nand-bus-width = <8>;
			//nand-ecc-mode = "hw";
			//atmel,has-pmecc;
			//atmel,pmecc-cap = <8>;
			//atmel,pmecc-sector-size = <512>; // sector size for ECC computation. Supported values are: 512, 1024.
			//nand-on-flash-bbt;
			//status = "okay";

			reg = <0x3 0x0 0x2>;
			#address-cells = <1>;
			#size-cells = <1>;
			atmel,rb = <0>;
			atmel,has-pmecc; // new
			atmel,pmecc-cap = <8>; // new
			atmel,pmecc-sector-size = <512>; // new
			nand-bus-width = <8>; // 8 or 16 bus width if not present 8
			nand-ecc-mode = "hw"; // String, operation mode of the NAND ecc mode. Supported values are: "none", "soft", "hw", "hw_syndrome", "hw_oob_first", "on-die". Deprecated values: "soft_bch": use "soft" and nand-ecc-algo instead
			nand-ecc-strength = <8>; // integer representing the number of bits to correct per ECC step.
			nand-ecc-step-size = <512>; // integer representing the number of data bytes that are covered by a single ECC step.
			nand-on-flash-bbt; // boolean to enable on flash bbt option if not present fal
			label = "atmel_nand";
			status = "okay";

			u-boot@0 {
				label = "u-boot";
				reg = <0x00000000 0x00100000>;
			};

			ubi@100000 {
				label = "ubi";
				reg = <0x00100000 0x1FF00000>;
			};
		};
	}; /* ahb END */
};
